* Program D from 2.3.2, Knuth's version
*
* NOTE: to make printing look slightly nicer, I changed to the INFO
* fields to have a space of padding at the end. Thus with _
* representing space, ___** becomes __**_.
*
* DIFFERENTIATION IN A RIGHT-THREADED TREE
LLINK	EQU	4:5
RLINK	EQU	1:2
RLINKT	EQU	0:2
TYPE	EQU	3:3
LINE	ORIG	*+24
* PRINT subroutine: print out the postorder sequence of tree
* Input: rI1=HEAD
* Registers used: rI1 = cur node, rI2 = line pointer
PRINT	STJ	9F
	ST1	HEAD
	ENT2	-24
3H	LDA	0,1(RLINKT)	RTAG(rI1)
	JAP	1F		  = 1?
	LD1	0,1(RLINK)	rI1 <- RLINK(rI1).
	JMP	2F
1H	LD1	0,1(RLINK)	rI1 <- RLINK(rI1).
	LDA	0,1(LLINK)	LLINK(rI1)
	JAZ	2F		  != NULL?
	LD1	0,1(LLINK)	rI1 <- LLINK(rI1).
	JMP	*-3		Repeat.
2H	LDA	1,1		Print INFO(rI1).
	LDX	0,1(TYPE)	TYPE(rI1) = 0?
	JXNZ	*+3		Convert to characters
	CHAR
	SLAX	5
	STA	LINE+24,2
	INC2	1
	J2N	*+4		Time to print line?
	OUT	LINE(18)
	JBUS	*(18)
	ENT2	-24
	CMP1	HEAD		Have we traversed the whole tree?
	JNE	1F
	STZ	LINE+24,2	Blank out rest of the line
	ENT1	LINE+25,2
	INC2	1
	ST2	*+2(4:4)
	DEC2	1
	MOVE	LINE+24,2(*)
	OUT	LINE(18)	Print the remaining stuff
	JBUS	*(18)
9H	JMP	*
1H	JMP	3B
HEAD	CON	0
* TEST CASE
* y = 3 ln(x+1) - a/x^2
Y	CON	*+2(LLINK),Y(RLINKT),1(TYPE)		y -> (-, y)
	ALF	   Y 
	CON	*+2(LLINK),-Y(RLINKT),5(TYPE)		- -> (*, Y)
	ALF	   - 
	CON	*+2(LLINK),*+12(RLINKT),6(TYPE)		* -> (3, /)
	ALF	   * 
	CON	0(LLINK),*+2(RLINKT),0(TYPE)		3 -> (NULL, ln)
	CON	3
	CON	*+2(LLINK),-*+4(RLINKT),2(TYPE)		ln -> (+, *)
	ALF	  LN 
	CON	*+2(LLINK),-*+2(RLINKT),4(TYPE)		+ -> (x, ln)
	ALF	   + 
	CON	0(LLINK),*+2(RLINKT),1(TYPE)		x -> (NULL, 1)
	ALF	   X 
	CON	0(LLINK),-*+4(RLINKT),0(TYPE)		1 -> (NULL, +)
	CON	1
	CON	*+2(LLINK),-*+14(RLINKT),7(TYPE)	/ -> (a, -)
	ALF	   / 
	CON	0(LLINK),*+2(RLINKT),1(TYPE)		a -> (NULL, ^)
	ALF	   A 
	CON	*+2(LLINK),-*+4(RLINKT),8(TYPE)		^ -> (x, /)
	ALF	  ** 
	CON	0(LLINK),*+2(RLINKT),1(TYPE)		x -> (NULL, 2)
	ALF	   X 
	CON	0(LLINK),-*+4(RLINKT),0(TYPE)		2 -> (NULL, ^)
	CON	2
DY	CON	*(RLINKT),1(TYPE)
	ALF	  DY 
* PROGRAM STARTS HERE
TEST	ENT1	POOL		Setup memory pool
	INC1	2
	ENT2	200
	ST1	-2,1(LLINK)
	MOVE	POOL(2)
	DEC2	1
	J2P	*-3
	STZ	-2,1
	ENT1	Y		Print original expression
	JMP	PRINT
	JMP	D1		Run differentiation routine
	ENT1	DY		Print differentiated expression
	JMP	PRINT
	HLT
* MAIN CONTROL ROUTINE
D1	STJ	9F
	LD4	Y(LLINK)
1H	ENT2	0,4
2H	LD4	0,2(LLINK)
	J4NZ	1B
D2	LD1	0,2(TYPE)
	JMP	*+1,1
	JMP	CONSTANT
	JMP	VARIABLE
	JMP	LN
	JMP	NEG
	JMP	ADD
	JMP	SUB
	JMP	MUL
	JMP	DIV
	JMP	PWR
D3	ST3	0,4(RLINK)
D4	ENT3	0,2
	LD2	0,2(RLINKT)
	J2N	1F
	ST5	0,3(RLINK)
	JMP	2B
1H	ENN2	0,2
D5	ENT1	-Y,2
	LD4	0,2(LLINK)
	LD6	0,4(RLINK)
	J1NZ	D2
	ST5	DY(LLINK)
	ENNA	DY
	STA	0,5(RLINKT)
9H	JMP	*
* BASIC SUBROUTINES FOR TREE CONSTRUCTION
TREE0	STJ	9F
	JMP	2F
TREE1	ST1	3F(0:2)
	JSJ	1F
TREE2	STX	3F(0:2)
3H	ST1	*(RLINKT)
1H	STJ	9F
	LDXN	AVAIL
	JXZ	OVERFLOW
	STX	0,1(RLINKT)
	LDX	3B(0:2)
	STA	*+1(0:2)
	STX	*(LLINK)
2H	LD1	AVAIL
	J1Z	OVERFLOW
	LDX	0,1(LLINK)
	STX	AVAIL
	STA	*+1(0:2)
	MOVE	*(2)
	DEC1	2
9H	JMP	*
COPYP1	ENT1	0,4
	JSJ	COPY
COPYP2	ENT1	0,3
COPY	STJ	9F
	ST3	6F(0:2)
	ST2	7F(0:2)
	ENT2	8F
	JMP	1F
8H	CON	0
4H	LD1	0,1(LLINK)
1H	LD3	AVAIL
	J3Z	OVERFLOW
	LDA	0,3(LLINK)
	STA	AVAIL
	ST3	0,2(LLINK)
	ENNA	0,2
	STA	0,3(RLINKT)
	INCA	8B
	ENT2	0,3
	JAZ	C3
C2	LDA	0,1
	JAN	C3
	LD3	AVAIL
	J3Z	OVERFLOW
	LDA	0,3(LLINK)
	STA	AVAIL
	LDA	0,2(RLINKT)
	STA	0,3(RLINKT)
	ST3	0,2(RLINKT)
C3	LDA	1,1
	STA	1,2
	LDA	0,1(TYPE)
	STA	0,2(TYPE)
C4	LDA	0,1(LLINK)
	JANZ	4B
	STZ	0,2(LLINK)
C5	LD2N	0,2(RLINKT)
	LD1	0,1(RLINK)
	J2P	C5
	ENN2	0,2
C6	J2NZ	C2
	LD1	8B(LLINK)
6H	ENT3	*
7H	ENT2	*
9H	JMP	*
CON0	CON	0
	CON	0
CON1	CON	0
	CON	1
CON2	CON	0
	CON	2
LOG	CON	2(TYPE)
	ALF	   LN
NEGOP	CON	3(TYPE)
	ALF	  NEG
PLUS	CON	4(TYPE)
	ALF	   + 
MINUS	CON	5(TYPE)
	ALF	   - 
TIMES	CON	6(TYPE)
	ALF	   * 
SLASH	CON	7(TYPE)
	ALF	   / 
UPARROW	CON	8(TYPE)
	ALF	  ** 
* DIFFERENTIATION ROUTINES
VARIABLE	LDX	1,2
	ENTA	CON1
	CMPX	2F
	JE	*+2
CONSTANT	ENTA	CON0
	JMP	TREE0
1H	ENT5	0,1
	JMP	D4
2H	ALF	   X 
LN	LDA	1,5
	JAZ	D4
	JMP	COPYP1
	ENTX	0,5
	ENTA	SLASH
	JMP	TREE2
	JMP	1B
NEG	LDA	1,5
	JAZ	D4
	ENTA	NEGOP
	ENT1	0,5
	JMP	TREE1
	JMP	1B
ADD	LDA	1,6
	JANZ	1F
3H	LDA	AVAIL
	STA	0,6(LLINK)
	ST6	AVAIL
	JMP	D3
1H	LDA	1,5
	JANZ	1F
2H	LDA	AVAIL
	STA	0,5(LLINK)
	ST5	AVAIL
	ENT5	0,6
	JMP	D3
1H	ENTA	PLUS
4H	ENTX	0,6
	ENT1	0,5
	JMP	TREE2
	ENT5	0,1
	JMP	D3
SUB	LDA	1,5
	JAZ	2B
	LDA	1,6
	JANZ	1F
	ENTA	NEGOP
	ENT1	0,5
	JMP	TREE1
	ENT5	0,1
	JMP	3B
1H	ENTA	MINUS
	JMP	4B
MUL	LDA	1,6
	JAZ	1F
	JMP	COPYP2
	ENTA	0,6
	JMP	MULT
	ENT6	0,1
1H	LDA	1,5
	JAZ	ADD
	JMP	COPYP1
	ENTA	0,1
	ENT1	0,5
	JMP	MULT
	ENT5	0,1
	JMP	ADD
MULT	STJ	9F
	STA	1F(0:2)
	ST2	8F(0:2)
1H	ENT2	*
	LDA	1,2
	DECA	1
	JANZ	1F
	LDA	0,2(TYPE)
	JAZ	2F
1H	LDA	1,1
	DECA	1
	JANZ	1F
	LDA	0,1(TYPE)
	JANZ	1F
	ST1	*+2(0:2)
	ENT1	0,2
	ENT2	*
2H	LDA	AVAIL
	STA	0,2(LLINK)
	ST2	AVAIL
	JMP	8F
1H	ENTA	TIMES
	ENTX	0,2
	JMP	TREE2
8H	ENT2	*
9H	JMP	*
DIV	LDA	1,6
	JAZ	1F
	JMP	COPYP2
	ENTA	SLASH
	ENTX	0,6
	JMP	TREE2
	ENT6	0,1
1H	LDA	1,5
	JAZ	SUB
	JMP	COPYP2
	ST1	1F(0:2)
	ENTA	CON2
	JMP	TREE0
	ENTA	UPARROW
1H	ENTX	*
	JMP	TREE2
	ST1	1F(0:2)
	JMP	COPYP1
	ENTA	0,1
	ENT1	0,5
	JMP	MULT
	ENTX	0,1
1H	ENT1	*
	ENTA	SLASH
	JMP	TREE2
	ENT5	0,1
	JMP	SUB
PWR	LDA	1,6
	JAZ	4F
	JMP	COPYP1
	ST1	R(0:2)
	LDA	0,3(TYPE)
	JANZ	2F
	LDA	1,3
	DECA	2
	JAZ	3F
	INCA	1
	STA	CON0+1
	ENTA	CON0
	JMP	TREE0
	STZ	CON0+1
	JMP	5F
2H	JMP	COPYP2
	ST1	1F(0:2)
	ENTA	CON1
	JMP	TREE0
1H	ENTX	*
	ENTA	MINUS
	JMP	TREE2
5H	LDX	R(0:2)
	ENTA	UPARROW
	JMP	TREE2
	ST1	R(0:2)
3H	JMP	COPYP2
	ENTA	0,1
R	ENT1	*
	JMP	MULT
	ENTA	0,6
	JMP	MULT
	ENT6	0,1
4H	LDA	1,5
	JAZ	ADD
	JMP	COPYP1
	ENTA	LOG
	JMP	TREE1
	ENTA	0,1
	ENT1	0,5
	JMP	MULT
	ST1	1F(0:2)
	JMP	COPYP1
	ST1	2F(0:2)
	JMP	COPYP2
2H	ENTX	*
	ENTA	UPARROW
	JMP	TREE2
1H	ENTX	*
	ENTA	TIMES
	JMP	TREE2
	ENT5	0,1
	JMP	ADD
OVERFLOW	OUT	*+3(18)
	JBUS	*(18)
	HLT	999
	ALF	OVERF
	ALF	LOW D
	ALF	ETECE
	ALF	D; AB
	ALF	ORT  
	ORIG	*+19
AVAIL	CON	*+1
* MEMORY POOL
POOL	CON	0
	CON	0
	END	TEST